{"/home/travis/build/npmtest/node-npmtest-gulp-inject/test.js":"/* istanbul instrument in package npmtest_gulp_inject */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/lib.npmtest_gulp_inject.js":"/* istanbul instrument in package npmtest_gulp_inject */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_inject = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_inject = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-inject && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_inject */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_inject\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_inject.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_inject.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_inject.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_inject.__dirname +\n                    '/lib.npmtest_gulp_inject.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/gulp-inject/index.js":"/**\n * Export `gulp-inject`\n */\nmodule.exports = exports = require('./src/inject');\n\n/**\n * Export the default transform function(s)\n */\nexports.transform = require('./src/transform');\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/gulp-inject/src/inject/index.js":"'use strict';\nvar through2 = require('through2');\nvar gutil = require('gulp-util');\nvar streamToArray = require('stream-to-array');\nvar escapeStringRegexp = require('escape-string-regexp');\nvar groupArray = require('group-array');\nvar extname = require('../extname');\nvar transform = require('../transform');\nvar tags = require('../tags');\nvar getFilepath = require('../path');\n\nvar PluginError = gutil.PluginError;\nvar magenta = gutil.colors.magenta;\nvar cyan = gutil.colors.cyan;\nvar noop = function noop() {};\n\n/**\n * Constants\n */\nvar PLUGIN_NAME = 'gulp-inject';\nvar DEFAULT_NAME_FOR_TAGS = 'inject';\nvar LEADING_WHITESPACE_REGEXP = /^\\s*/;\n\nmodule.exports = exports = function (sources, opt) {\n  if (!sources) {\n    throw error('Missing sources stream!');\n  }\n  if (!opt) {\n    opt = {};\n  }\n\n  if (opt.sort) {\n    throw error('sort option is deprecated! Use `sort-stream` module instead!');\n  }\n  if (opt.templateString) {\n    throw error('`templateString` option is deprecated! Create a virtual `vinyl` file instead!');\n  }\n  if (opt.transform && typeof opt.transform !== 'function') {\n    throw error('transform option must be a function');\n  }\n  // Notify people of common mistakes...\n  if (typeof opt.read !== 'undefined') {\n    throw error('There is no `read` option. Did you mean to provide it for `gulp.src` perhaps?');\n  }\n\n  // Defaults:\n  opt.quiet = bool(opt, 'quiet', false);\n  opt.relative = bool(opt, 'relative', false);\n  opt.addRootSlash = bool(opt, 'addRootSlash', !opt.relative);\n  opt.transform = defaults(opt, 'transform', transform);\n  opt.tags = tags();\n  opt.name = defaults(opt, 'name', DEFAULT_NAME_FOR_TAGS);\n  transform.selfClosingTag = bool(opt, 'selfClosingTag', false);\n\n  // Is the first parameter a Vinyl File Stream:\n  if (typeof sources.on === 'function' && typeof sources.pipe === 'function') {\n    return handleVinylStream(sources, opt);\n  }\n\n  throw error('passing target file as a string is deprecated! Pass a vinyl file stream (i.e. use `gulp.src`)!');\n};\n\nfunction defaults(options, prop, defaultValue) {\n  return options[prop] || defaultValue;\n}\n\nfunction bool(options, prop, defaultVal) {\n  return typeof options[prop] === 'undefined' ? defaultVal : Boolean(options[prop]);\n}\n\n/**\n * Handle injection when files to\n * inject comes from a Vinyl File Stream\n *\n * @param {Stream} sources\n * @param {Object} opt\n * @returns {Stream}\n */\nfunction handleVinylStream(sources, opt) {\n  var collected = streamToArray(sources);\n\n  return through2.obj(function (target, enc, cb) {\n    if (target.isStream()) {\n      return cb(error('Streams not supported for target templates!'));\n    }\n    collected.then(function (collection) {\n      target.contents = getNewContent(target, collection, opt);\n      this.push(target);\n      cb();\n    }.bind(this))\n    .catch(function (err) {\n      cb(err);\n    });\n  });\n}\n\n/**\n * Get new content for template\n * with all injections made\n *\n * @param {Object} target\n * @param {Array} collection\n * @param {Object} opt\n * @returns {Buffer}\n */\nfunction getNewContent(target, collection, opt) {\n  var logger = opt.quiet ? noop : function (filesCount) {\n    if (filesCount) {\n      log(cyan(filesCount) + ' files into ' + magenta(target.relative) + '.');\n    } else {\n      log('Nothing to inject into ' + magenta(target.relative) + '.');\n    }\n  };\n  var content = String(target.contents);\n  var targetExt = extname(target.path);\n  var files = prepareFiles(collection, targetExt, opt, target);\n  var filesPerTags = groupArray(files, 'tagKey');\n  var startAndEndTags = Object.keys(filesPerTags);\n  var matches = [];\n  var injectedFilesCount = 0;\n\n  startAndEndTags.forEach(function (tagKey) {\n    var files = filesPerTags[tagKey];\n    var startTag = files[0].startTag;\n    var endTag = files[0].endTag;\n    var tagsToInject = getTagsToInject(files, target, opt);\n    content = inject(content, {\n      startTag: startTag,\n      endTag: endTag,\n      tagsToInject: tagsToInject,\n      removeTags: opt.removeTags,\n      empty: opt.empty,\n      willInject: function (filesToInject) {\n        injectedFilesCount += filesToInject.length;\n      },\n      onMatch: function (match) {\n        matches.push(match[0]);\n      }\n    });\n  });\n\n  logger(injectedFilesCount);\n\n  if (opt.empty) {\n    var ext = '{{ANY}}';\n    var startTag = getTagRegExp(opt.tags.start(targetExt, ext, opt.starttag), ext, opt);\n    var endTag = getTagRegExp(opt.tags.end(targetExt, ext, opt.starttag), ext, opt);\n\n    content = inject(content, {\n      startTag: startTag,\n      endTag: endTag,\n      tagsToInject: [],\n      removeTags: opt.removeTags,\n      empty: opt.empty,\n      shouldAbort: function (match) {\n        return matches.indexOf(match[0]) !== -1;\n      }\n    });\n  }\n\n  return new Buffer(content);\n}\n\n/**\n * Inject tags into content for given\n * start and end tags\n *\n * @param {String} content\n * @param {Object} opt\n * @returns {String}\n */\nfunction inject(content, opt) {\n  var startTag = opt.startTag;\n  var endTag = opt.endTag;\n  var startMatch;\n  var endMatch;\n\n  /**\n   * The content consists of:\n   *\n   * <everything before startMatch>\n   * <startMatch>\n   * <previousInnerContent>\n   * <endMatch>\n   * <everything after endMatch>\n   */\n\n  while ((startMatch = startTag.exec(content)) !== null) {\n    if (typeof opt.onMatch === 'function') {\n      opt.onMatch(startMatch);\n    }\n    if (typeof opt.shouldAbort === 'function' && opt.shouldAbort(startMatch)) {\n      continue;\n    }\n    // Take care of content length change:\n    endTag.lastIndex = startTag.lastIndex;\n    endMatch = endTag.exec(content);\n    if (!endMatch) {\n      throw error('Missing end tag for start tag: ' + startMatch[0]);\n    }\n    var toInject = opt.tagsToInject.slice();\n\n    if (typeof opt.willInject === 'function') {\n      opt.willInject(toInject);\n    }\n\n    // <everything before startMatch>:\n    var newContents = content.slice(0, startMatch.index);\n\n    if (opt.removeTags) {\n      if (opt.empty) {\n        // Take care of content length change:\n        startTag.lastIndex -= startMatch[0].length;\n      }\n    } else {\n      // <startMatch> + <endMatch>\n      toInject.unshift(startMatch[0]);\n      toInject.push(endMatch[0]);\n    }\n    var previousInnerContent = content.substring(startTag.lastIndex, endMatch.index);\n    var indent = getLeadingWhitespace(previousInnerContent);\n    // <new inner content>:\n    newContents += toInject.join(indent);\n    // <everything after endMatch>:\n    newContents += content.slice(endTag.lastIndex);\n    // replace old content with new:\n    content = newContents;\n  }\n\n  return content;\n}\n\nfunction getLeadingWhitespace(str) {\n  return str.match(LEADING_WHITESPACE_REGEXP)[0];\n}\n\nfunction prepareFiles(files, targetExt, opt, target) {\n  return files.map(function (file) {\n    var ext = extname(file.path);\n    var filePath = getFilepath(file, target, opt);\n    var startTag = getTagRegExp(opt.tags.start(targetExt, ext, opt.starttag), ext, opt, filePath);\n    var endTag = getTagRegExp(opt.tags.end(targetExt, ext, opt.endtag), ext, opt, filePath);\n    var tagKey = String(startTag) + String(endTag);\n    return {\n      file: file,\n      ext: ext,\n      startTag: startTag,\n      endTag: endTag,\n      tagKey: tagKey\n    };\n  });\n}\n\nfunction getTagRegExp(tag, sourceExt, opt, sourcePath) {\n  tag = makeWhiteSpaceOptional(escapeStringRegexp(tag));\n  tag = replaceVariables(tag, {\n    name: opt.name,\n    path: sourcePath,\n    ext: sourceExt === '{{ANY}}' ? '.+' : sourceExt\n  });\n  return new RegExp(tag, 'ig');\n}\n\nfunction replaceVariables(str, variables) {\n  return Object.keys(variables).reduce(function (str, variable) {\n    return str.replace(new RegExp(escapeStringRegexp(escapeStringRegexp('{{' + variable + '}}')), 'ig'), variables[variable] + '\\\\b');\n  }, str);\n}\n\nfunction makeWhiteSpaceOptional(str) {\n  return str.replace(/\\s+/g, '\\\\s*');\n}\n\nfunction getTagsToInject(files, target, opt) {\n  return files.reduce(function transformFile(lines, file, i, files) {\n    var filepath = getFilepath(file.file, target, opt);\n    var transformedContents = opt.transform(filepath, file.file, i, files.length, target);\n    if (typeof transformedContents !== 'string') {\n      return lines;\n    }\n    return lines.concat(transformedContents);\n  }, []);\n}\n\nfunction log(message) {\n  gutil.log(magenta(PLUGIN_NAME), message);\n}\n\nfunction error(message) {\n  return new PluginError(PLUGIN_NAME, message);\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/gulp-inject/src/extname/index.js":"'use strict';\nvar path = require('path');\n\nmodule.exports = exports = function extname(file) {\n  file = file.split('?')[0];\n  return path.extname(file).slice(1);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/gulp-inject/src/transform/index.js":"'use strict';\nvar extname = require('../extname');\n\n/**\n * Constants\n */\nvar TARGET_TYPES = ['html', 'jade', 'pug', 'slm', 'slim', 'jsx', 'haml', 'less', 'sass', 'scss'];\nvar IMAGES = ['jpeg', 'jpg', 'png', 'gif'];\nvar DEFAULT_TARGET = TARGET_TYPES[0];\n\n/**\n * Transform module\n */\nvar transform = module.exports = exports = function (filepath, i, length, sourceFile, targetFile) {\n  var type;\n  if (targetFile && targetFile.path) {\n    var ext = extname(targetFile.path);\n    type = typeFromExt(ext);\n  }\n  if (!isTargetType(type)) {\n    type = DEFAULT_TARGET;\n  }\n  var func = transform[type];\n  if (func) {\n    return func.apply(transform, arguments);\n  }\n};\n\n/**\n * Options\n */\n\ntransform.selfClosingTag = false;\n\n/**\n * Transform functions\n */\nTARGET_TYPES.forEach(function (targetType) {\n  transform[targetType] = function (filepath) {\n    var ext = extname(filepath);\n    var type = typeFromExt(ext);\n    var func = transform[targetType][type];\n    if (func) {\n      return func.apply(transform[targetType], arguments);\n    }\n  };\n});\n\ntransform.html.css = function (filepath) {\n  return '<link rel=\"stylesheet\" href=\"' + filepath + '\"' + end();\n};\n\ntransform.html.js = function (filepath) {\n  return '<script src=\"' + filepath + '\"></script>';\n};\ntransform.html.map = transform.html.js;\n\ntransform.html.jsx = function (filepath) {\n  return '<script type=\"text/jsx\" src=\"' + filepath + '\"></script>';\n};\n\ntransform.html.html = function (filepath) {\n  return '<link rel=\"import\" href=\"' + filepath + '\"' + end();\n};\n\ntransform.html.coffee = function (filepath) {\n  return '<script type=\"text/coffeescript\" src=\"' + filepath + '\"></script>';\n};\n\ntransform.html.image = function (filepath) {\n  return '<img src=\"' + filepath + '\"' + end();\n};\n\ntransform.jade.css = function (filepath) {\n  return 'link(rel=\"stylesheet\", href=\"' + filepath + '\")';\n};\n\ntransform.jade.js = function (filepath) {\n  return 'script(src=\"' + filepath + '\")';\n};\n\ntransform.jade.jsx = function (filepath) {\n  return 'script(type=\"text/jsx\", src=\"' + filepath + '\")';\n};\n\ntransform.jade.jade = function (filepath) {\n  return 'include ' + filepath;\n};\n\ntransform.jade.html = function (filepath) {\n  return 'link(rel=\"import\", href=\"' + filepath + '\")';\n};\n\ntransform.jade.coffee = function (filepath) {\n  return 'script(type=\"text/coffeescript\", src=\"' + filepath + '\")';\n};\n\ntransform.jade.image = function (filepath) {\n  return 'img(src=\"' + filepath + '\")';\n};\n\ntransform.pug.css = function (filepath) {\n  return 'link(rel=\"stylesheet\", href=\"' + filepath + '\")';\n};\n\ntransform.pug.js = function (filepath) {\n  return 'script(src=\"' + filepath + '\")';\n};\n\ntransform.pug.jsx = function (filepath) {\n  return 'script(type=\"text/jsx\", src=\"' + filepath + '\")';\n};\n\ntransform.pug.pug = function (filepath) {\n  return 'include ' + filepath;\n};\n\ntransform.pug.html = function (filepath) {\n  return 'link(rel=\"import\", href=\"' + filepath + '\")';\n};\n\ntransform.pug.coffee = function (filepath) {\n  return 'script(type=\"text/coffeescript\", src=\"' + filepath + '\")';\n};\n\ntransform.pug.image = function (filepath) {\n  return 'img(src=\"' + filepath + '\")';\n};\n\ntransform.slm.css = function (filepath) {\n  return 'link rel=\"stylesheet\" href=\"' + filepath + '\"';\n};\n\ntransform.slm.js = function (filepath) {\n  return 'script src=\"' + filepath + '\"';\n};\n\ntransform.slm.html = function (filepath) {\n  return 'link rel=\"import\" href=\"' + filepath + '\"';\n};\n\ntransform.slm.coffee = function (filepath) {\n  return 'script type=\"text/coffeescript\" src=\"' + filepath + '\"';\n};\n\ntransform.slm.image = function (filepath) {\n  return 'img src=\"' + filepath + '\"';\n};\n\ntransform.slim.css = transform.slm.css;\n\ntransform.slim.js = transform.slm.js;\n\ntransform.slim.html = transform.slm.html;\n\ntransform.slim.coffee = transform.slm.coffee;\n\ntransform.slim.image = transform.slm.image;\n\ntransform.haml.css = function (filepath) {\n  return '%link{rel:\"stylesheet\", href:\"' + filepath + '\"}';\n};\n\ntransform.haml.js = function (filepath) {\n  return '%script{src:\"' + filepath + '\"}';\n};\n\ntransform.haml.html = function (filepath) {\n  return '%link{rel:\"import\", href:\"' + filepath + '\"}';\n};\n\ntransform.haml.coffee = function (filepath) {\n  return '%script{type:\"text/coffeescript\", src:\"' + filepath + '\"}';\n};\n\ntransform.haml.image = function (filepath) {\n  return '%img{src:\"' + filepath + '\"}';\n};\n\ntransform.less.less = function (filepath) {\n  return '@import \"' + filepath + '\";';\n};\n\ntransform.less.css = transform.less.less;\n\ntransform.sass.sass = function (filepath) {\n  return '@import \"' + filepath + '\"';\n};\n\ntransform.sass.scss = transform.sass.sass;\ntransform.sass.css = transform.sass.sass;\n\ntransform.scss.sass = transform.less.less;\ntransform.scss.scss = transform.scss.sass;\ntransform.scss.css = transform.scss.sass;\n\n/**\n * Transformations for jsx is like html\n * but always with self closing tags, invalid jsx otherwise\n */\nObject.keys(transform.html).forEach(function (type) {\n  transform.jsx[type] = function () {\n    var originalOption = transform.selfClosingTag;\n    transform.selfClosingTag = true;\n    var result = transform.html[type].apply(transform.html, arguments);\n    transform.selfClosingTag = originalOption;\n    return result;\n  };\n});\n\nfunction end() {\n  return transform.selfClosingTag ? ' />' : '>';\n}\n\nfunction typeFromExt(ext) {\n  ext = ext.toLowerCase();\n  if (isImage(ext)) {\n    return 'image';\n  }\n  return ext;\n}\n\nfunction isImage(ext) {\n  return IMAGES.indexOf(ext) > -1;\n}\n\nfunction isTargetType(type) {\n  if (!type) {\n    return false;\n  }\n  return TARGET_TYPES.indexOf(type) > -1;\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/gulp-inject/src/tags/index.js":"\n/**\n * Constants\n */\nvar DEFAULT_TARGET = 'html';\nvar DEFAULTS = {\n  STARTS: {\n    html: '<!-- {{name}}:{{ext}} -->',\n    jsx: '{/* {{name}}:{{ext}} */}',\n    jade: '//- {{name}}:{{ext}}',\n    pug: '//- {{name}}:{{ext}}',\n    slm: '/ {{name}}:{{ext}}',\n    slim: '/ {{name}}:{{ext}}',\n    haml: '-# {{name}}:{{ext}}',\n    less: '/* {{name}}:{{ext}} */',\n    sass: '/* {{name}}:{{ext}} */',\n    scss: '/* {{name}}:{{ext}} */'\n  },\n  ENDS: {\n    html: '<!-- endinject -->',\n    jsx: '{/* endinject */}',\n    jade: '//- endinject',\n    pug: '//- endinject',\n    slm: '/ endinject',\n    slim: '/ endinject',\n    haml: '-# endinject',\n    less: '/* endinject */',\n    sass: '/* endinject */',\n    scss: '/* endinject */'\n  }\n};\n\nmodule.exports = function tags() {\n  return {\n    start: getTag.bind(null, DEFAULTS.STARTS),\n    end: getTag.bind(null, DEFAULTS.ENDS)\n  };\n};\n\nfunction getTag(defaults, targetExt, sourceExt, defaultValue) {\n  var tag = defaultValue;\n  if (!tag) {\n    tag = defaults[targetExt] || defaults[DEFAULT_TARGET];\n  } else if (typeof tag === 'function') {\n    tag = tag(targetExt, sourceExt);\n  }\n  return tag;\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-inject/gulp-inject/src/path/index.js":"'use strict';\nvar path = require('path');\nvar arrify = require('arrify');\n\nmodule.exports = exports = function getFilepath(sourceFile, targetFile, opt) {\n  opt = opt || {};\n  var ignorePath = arrify(opt.ignorePath);\n  var base = opt.relative ? path.dirname(addRootSlash(unixify(targetFile.path))) : addRootSlash(unixify(sourceFile.cwd));\n\n  var filepath = unixify(path.relative(base, addRootSlash(unixify(sourceFile.path))));\n\n  if (ignorePath.length) {\n    filepath = removeBasePath(ignorePath, filepath);\n  }\n\n  if (opt.addPrefix) {\n    filepath = addPrefix(filepath, opt.addPrefix);\n  }\n\n  if (opt.addRootSlash) {\n    filepath = addRootSlash(filepath);\n  } else if (!opt.addPrefix) {\n    filepath = removeRootSlash(filepath);\n  }\n\n  if (opt.addSuffix) {\n    filepath = addSuffix(filepath, opt.addSuffix);\n  }\n\n  return filepath;\n};\n\nfunction unixify(filepath) {\n  return filepath.replace(/\\\\/g, '/');\n}\nfunction addRootSlash(filepath) {\n  return filepath.replace(/^\\/*([^\\/])/, '/$1');\n}\nfunction removeRootSlash(filepath) {\n  return filepath.replace(/^\\/+/, '');\n}\nfunction addPrefix(filepath, prefix) {\n  return prefix + addRootSlash(filepath);\n}\nfunction addSuffix(filepath, suffix) {\n  return filepath + suffix;\n}\n\nfunction removeBasePath(basedirs, filepath) {\n  return basedirs.map(unixify).reduce(function (path, remove) {\n    if (path[0] === '/' && remove[0] !== '/') {\n      remove = '/' + remove;\n    }\n    if (path[0] !== '/' && remove[0] === '/') {\n      path = '/' + path;\n    }\n    if (remove && path.indexOf(remove) === 0) {\n      return path.slice(remove.length);\n    }\n    return path;\n  }, filepath);\n}\n"}